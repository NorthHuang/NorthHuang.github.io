<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NorthHuang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-08T02:17:21.617Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>NorthHuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel远层一对一新特性的学习</title>
    <link href="http://yoursite.com/2019/04/08/Laravel%E8%BF%9C%E5%B1%82%E4%B8%80%E5%AF%B9%E4%B8%80%E6%96%B0%E7%89%B9%E6%80%A7%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/04/08/Laravel远层一对一新特性的学习/</id>
    <published>2019-04-08T02:16:07.000Z</published>
    <updated>2019-04-08T02:17:21.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="根本问题"><a href="#根本问题" class="headerlink" title="根本问题"></a>根本问题</h2><p>不优化查询被称为 “N + 1” 问题。当我们在使用对象来表示查询时，可能在不知情的情况下使用了查询。<br>想象一下，您收到了100个来自数据库的对象，并且每条记录都有1个关联的模型（即belongsTo）。使用ORM默认会产生101条查询; 对原始100条记录 进行一次查询，如果访问了模型对象上的相关数据，则对每条记录进行附加查询。在伪代码中，假设您要列出所有已发布帖子的发布作者。从一组帖子（每个帖子有一位作者），您可以得到一个作者姓名列表，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$posts = Post::published()-&gt;get(); // 一次查询</span><br><span class="line"></span><br><span class="line">$authors = array_map(function($post) &#123;</span><br><span class="line">    // 生成对作者模型的查询</span><br><span class="line">    return $post-&gt;author-&gt;name;</span><br><span class="line">&#125;, $posts);</span><br></pre></td></tr></table></figure></p><p>我们并没有告诉模型我们需要所有作者，因此每次从各个<code>Post</code>模型实例中获取作者姓名时都会发生单独的查询 。</p><h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>Laravel的预加载可以解决该问题，需要外键关联。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Laravel官网的例子</span><br><span class="line">$posts = Post::with(&apos;author&apos;)-&gt;limit(100)-&gt;get();</span><br><span class="line">#公司项目，with里可以传多个关联表</span><br><span class="line">public function getSeatUsagesSum($id, $slug, $start_date, $end_date, $limit = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $key = md5(&apos;seat-usages-sum-&apos; . implode(&apos;-&apos;, func_get_args()));</span><br><span class="line">        return Cache::remember(</span><br><span class="line">            $key,</span><br><span class="line">            $this-&gt;cache_minutes,</span><br><span class="line">            function () use ($id, $slug, $start_date, $end_date, $limit) &#123;</span><br><span class="line">                $query = SeatReport::with([&apos;seat&apos;,&apos;building&apos;])</span><br><span class="line">                    -&gt;selectRaw(</span><br><span class="line">                        &apos;seat_id,</span><br><span class="line">                        building_id,</span><br><span class="line">                        SUM(usages_count) as usages_count,</span><br><span class="line">                        SUM(usage_time) as usage_time&apos;</span><br><span class="line">                    )</span><br><span class="line">                    -&gt;where($slug . &apos;_id&apos;, $id)</span><br><span class="line">                    -&gt;where(&apos;target_date&apos;, &apos;&gt;=&apos;, $start_date)</span><br><span class="line">                    -&gt;where(&apos;target_date&apos;, &apos;&lt;=&apos;, $end_date);</span><br><span class="line">                if ($limit) &#123;</span><br><span class="line">                    $query = $query-&gt;limit($limit);</span><br><span class="line">                &#125;</span><br><span class="line">                $seat_usages_count = $query-&gt;groupBy([&apos;seat_id&apos;, &apos;building_id&apos;])-&gt;orderBy(&apos;usages_count&apos;, &apos;desc&apos;)</span><br><span class="line">                    -&gt;get()-&gt;toArray();</span><br><span class="line">                return $seat_usages_count;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><p>with的好处明显，但局限性在于，配合外键和belongsTo()与hasOne()/hasMany(),只能使用一层。例如公司的使用场景：通过座位使用记录表order，查询到其所在的图书馆building.name，但座位使用记录表中只有seat.id，即可以通过with()关联外键seat.id，查到座位seat表里的building_id，但是需要再通过building_id去building表才能查到building.name，这样远层一对一就派上用场了。</p><h2 id="远层一对一"><a href="#远层一对一" class="headerlink" title="远层一对一"></a>远层一对一</h2><p>传递给 hasOneThrough 方法的第一个参数是我们最终希望访问的模型类名，第二个参数是中间模型的类名。</p><p>和前面几种关联关系一样，在执行这个关联查询时也会应用常规的 Eloquent 外键默认约定，如果你想要自定义关联关系使用的外键，可以将它们作为第三个和第四个参数传递到 hasOneThrough 方法。其中，第三个参数是中间模型的外键名称，第四个参数是最终要访问的模型的外键名称，hasOneThrough 方法还有第五个参数，默认是当前模型的主键名称，以及第六个参数，表示中间模型的主键名称：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Supplier extends Model</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Get the user&apos;s history.</span><br><span class="line">     */</span><br><span class="line">    public function userHistory()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;hasOneThrough(</span><br><span class="line">            &apos;App\History&apos;,</span><br><span class="line">            &apos;App\User&apos;,</span><br><span class="line">            &apos;supplier_id&apos;, // Foreign key on users table...</span><br><span class="line">            &apos;user_id&apos;, // Foreign key on history table...</span><br><span class="line">            &apos;id&apos;, // Local key on suppliers table...</span><br><span class="line">            &apos;id&apos; // Local key on users table...</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他办法"><a href="#其他办法" class="headerlink" title="其他办法"></a>其他办法</h2><p>项目里使用的是Laravel5.7，还不能使用远层一对一，考虑使用缓存来缓解该问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$grid-&gt;seat()-&gt;building_id(&apos;图书馆&apos;)-&gt;display(function ($building_id) &#123;</span><br><span class="line">            $key = md5(&apos;building-&apos; . $building_id);</span><br><span class="line">            $building = Cache::remember(</span><br><span class="line">                $key,</span><br><span class="line">                $this-&gt;cache_minutes,</span><br><span class="line">                function () use ($building_id) &#123;</span><br><span class="line">                    return OldBuilding::find($building_id);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">            return view(</span><br><span class="line">                &apos;admin.link&apos;,</span><br><span class="line">                [&apos;href&apos; =&gt; &apos;building?id=&apos; . $building-&gt;id, &apos;target&apos; =&gt; &apos;&apos;, &apos;text&apos; =&gt; $building-&gt;name]</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;根本问题&quot;&gt;&lt;a href=&quot;#根本问题&quot; class=&quot;headerlink&quot; title=&quot;根本问题&quot;&gt;&lt;/a&gt;根本问题&lt;/h2&gt;&lt;p&gt;不优化查询被称为 “N + 1” 问题。当我们在使用对象来表示查询时，可能在不知情的情况下使用了查询。&lt;br&gt;想象一下，您收
      
    
    </summary>
    
      <category term="学习心得" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>不占座微信小程序定位测试报告</title>
    <link href="http://yoursite.com/2019/04/01/%E4%B8%8D%E5%8D%A0%E5%BA%A7%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9A%E4%BD%8D%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/04/01/不占座微信小程序定位测试报告/</id>
    <published>2019-04-01T05:57:52.000Z</published>
    <updated>2019-04-01T06:09:27.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>在后台将图书馆地址设置为上海鸿运大厦，本人也在鸿运大厦内。改变扫码上座最远距离的值，测试小程序是否允许上座学习，选出合适的扫码上座最远距离。</p><h2 id="测试手机基本配置"><a href="#测试手机基本配置" class="headerlink" title="测试手机基本配置"></a>测试手机基本配置</h2><p>手机型号：OnePlus 5T<br>CPU：高通骁龙835（8核）<br>GPU：Adreno 540<br>RAM：6GB<br>ROM：64GB</p><h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><p>开启：移动网络<br>手机在室内的定位偏差（定位来源高德地图）：不能定位<br>不能使用微信小程序，如美团外卖等<br><img src="https://upload-images.jianshu.io/upload_images/17041450-846f5ec6b518dbff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4G.jpg"></p><p>开启：移动网络+卫星定位<br>手机在室内的定位偏差（定位来源高德地图）：350米左右<br>图书馆和自己同一位置：限制距离300米，200米，180米，160米可以学，150米不行<br><img src="https://upload-images.jianshu.io/upload_images/17041450-55924e8ec5946559.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4G+gps.jpg"></p><p>开启：WiFi（连接状态）<br>手机在室内的定位偏差（定位来源高德地图）：50米左右<br>不能使用微信小程序，如美团外卖等<br><img src="https://upload-images.jianshu.io/upload_images/17041450-c643913c4200f7ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wifi.jpg"></p><p>开启：WiFi（未连接状态）+移动网络<br>手机在室内的定位偏差（定位来源高德地图）：定位失败<br>不能使用微信小程序，如美团外卖等<br><img src="https://upload-images.jianshu.io/upload_images/17041450-95068a17c122271a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WiFi断开+4G.jpg"></p><p>开启：WiFi（连接状态）+卫星定位<br>手机在室内的定位偏差（定位来源高德地图）：20米左右<br>图书馆和自己同一位置：限制距离1000米，500米可以学，50米，80米，100米，160米，300米，400米不行<br><img src="https://upload-images.jianshu.io/upload_images/17041450-a442fb26dd4e1c40.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wifi+gps.jpg"></p><h2 id="测试结论"><a href="#测试结论" class="headerlink" title="测试结论"></a>测试结论</h2><ul><li>只有开启卫星定位才可以使用微信小程序（不占座和美团外卖小程序）。</li><li>在室内，卫星定位的强度较弱，WiFi+卫星定位比移动网络+卫星定位更准确，但是扫码上座最远距离需要调到500米，移动网络+卫星定位明显不如WiFi+卫星定位准确，扫码上座最远距离却只需要160米。</li><li>综上所述，考虑到国内最大的图书馆（厦门大学图书馆）是12万平方米左右，长120米左右，宽220米左右，而且使用WiFi和移动网络的用户都会存在（即最大误差为500米），扫码上座最远距离设置为1000米以内可以适用于大部分学校。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试方法&quot;&gt;&lt;a href=&quot;#测试方法&quot; class=&quot;headerlink&quot; title=&quot;测试方法&quot;&gt;&lt;/a&gt;测试方法&lt;/h2&gt;&lt;p&gt;在后台将图书馆地址设置为上海鸿运大厦，本人也在鸿运大厦内。改变扫码上座最远距离的值，测试小程序是否允许上座学习，选出合适的扫
      
    
    </summary>
    
      <category term="测试报告" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/29/hello-world/"/>
    <id>http://yoursite.com/2019/03/29/hello-world/</id>
    <published>2019-03-29T07:26:45.619Z</published>
    <updated>2019-03-29T07:26:45.619Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
